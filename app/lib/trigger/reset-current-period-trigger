// altas function syntax
exports = async function() {
  // A Scheduled Trigger will always call a function without arguments.
  // Documentation on Triggers: https://www.mongodb.com/docs/atlas/atlas-ui/triggers

  // Functions run by Triggers are run as System users and have full access to Services, Functions, and MongoDB Data.

  // Get the MongoDB service you want to use (see "Linked Data Sources" tab)
  const serviceName = "DailiesTest";
  const databaseName = "Dailies";
  const collectionName = "Users";
  //const collection = context.services.get(serviceName).db(databaseName).collection(collectionName);
  const userCollection = context.services.get(serviceName).db(databaseName).collection(collectionName);
  const notificationCollection = context.services.get(serviceName).db(databaseName).collection("Notifications");
  
  try {
    // const doc = await collection.findOne({ name: "mongodb" });
    const today = new Date();
    const DEFAULT_DATE = new Date("1970-01-01T00:00:00.000Z");
    console.log(typeof today)
    const filter = { goals : { $elemMatch : { inactive : false }}}

    // SEND MILESTONE NOTIFICATION ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // celeberate 25% done/50% done/100% done 
        // endDate - startDate = total diff
        // endDate - date.now = current diff
        // result = total - current / total * 100
        // if result > milestone_status THEN send notification and update milestone_status
    let milestone25 = []
    let milestone50 = []
    let milestone75 = []
    let milestone100 = []
    
    const getMilestoners = await userCollection.aggregate([
      {$unwind : "$goals"},
      {$match : {"goals.inactive" : {$ne : true}}},
      {$match : {"goals.milestoneReached": {$lt : 100}}},
      {$match : {"goals.endDate": {$ne : DEFAULT_DATE}}},
      {$match : {"goals.startDate": {$lte : today}}},
      {
        $addFields : {
          "goals.totalDiff" : { $subtract : [ "$goals.endDate", "$goals.startDate"]},
          "goals.currentDiff" : { $subtract : ["$goals.endDate", today]}
        }
      },
      { $addFields : {
        "goals.percentage" : {
          $multiply : [ {$divide : [{ $subtract : ["$goals.totalDiff", "$goals.currentDiff"]}, "$goals.totalDiff"]}, 100]
        }
      }}
    ]).toArray()

    return getMilestoners;
    
    
    
    
    // SEND GOAL ADJUSTMENT NOTFICIATION ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    // // get goals that will be resetting streak
    // const getGoalsEndingStreak = await userCollection.aggregate([
    //   { $unwind : "$goals"},
    //   {$match : { $and : [ { "goals.endOfCurrentPeriod" : {$lt : today}}, {"goals.inactive" : false },
    //                       { $expr : { $lt : ["$goals.timesPostedCurrentPeriod", "$goals.frequencyCount"]}},
    //                      ]}}
    // ]).toArray()
    
    // // for each goal reset, send a goal adjustment notification
    // let notificationDocs = []
    // getGoalsEndingStreak.forEach((userDoc) => {
    //   notificationDocs.push({
    //       type : "GOAL_ADJUSTMENT",
    //       icon : "GOAL_ADJUSTMENT",
    //       text : `Try lowering "*" goal's frequency - it might help you stay consistent and avoid feeling overwhelmed!`.replace( /\*/g, userDoc.goals.name),
    //       buttonText : "Adjust",
    //       path : `/edit-goal/${userDoc.goals.goalId}`,
    //       notifiedDateTime : today.toISOString(),
    //       seen : false,
    //       userId : userDoc._id,
    //       username : userDoc.username,
    //   })
    // })

    // // notificationDocs.forEach((doc) => {
    // //   console.log(notificationDocs)
    // // })

    // const addNotifications = await notificationCollection.insertMany(notificationDocs);
  
    // RESET USER GOAL'S STREAK AND UPDATE CURRENT PERIOD ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    // const updates = await userCollection.updateMany(filter, [{
    //   $set : {
    //     goals : {
    //       $map : {
    //         input : "$goals",
    //         in  : {
    //           $cond : {
    //             // if end of current period is earlier than today, update streak and current period
    //             if : { $and : [{$lt: ["$$this.endOfCurrentPeriod", today]}, {$eq : ["$$this.inactive", false]}] },
    //             then : {
    //               $mergeObjects : [
    //                 "$$this", {
    //                   startOfCurrentPeriod : today, 
    //                   endOfCurrentPeriod : {
    //                     $switch : {
    //                       branches : [
    //                         {case : {$eq : ["$$this.frequencyPeriod","per day"]}, then : {
    //                           $dateAdd : { 
    //                             startDate : "$$this.endOfCurrentPeriod",
    //                             unit : "day", amount : 1
    //                          }
    //                         }},
    //                         {case : {$eq : ["$$this.frequencyPeriod","per week"]}, then : {
    //                           $dateAdd : {
    //                             startDate : "$$this.endOfCurrentPeriod",
    //                             unit : "day",
    //                             amount : 7
    //                           }
    //                         }},
    //                         {case : {$eq : ["$$this.frequencyPeriod","per month"]}, then : {
    //                           $dateAdd : {
    //                             startDate : "$$this.endOfCurrentPeriod",
    //                             unit : "day",
    //                             amount : 30,
    //                           }
    //                         }},
    //                         {case : {$eq : ["$$this.frequencyPeriod","per year"]}, then : {
    //                           $dateAdd : {
    //                             startDate : "$$this.endOfCurrentPeriod",
    //                             unit : "day",
    //                             amount : 365
    //                           }
    //                         }},
    //                       ]
    //                     }
    //                   },
    //                   streak : {$cond : {
    //                     if : { $gte : ["$$this.timesPostedCurrentPeriod", "$$this.frequencyCount"] },
    //                     then : "$$this.streak",
    //                     else : 0
    //                   }},
    //                   timesPostedCurrentPeriod : 0,
    //                 }
    //               ]
    //             },
    //             else : "$$this"

    //           }
    //         }
    //       }
    //     }
    //   }
    // }])                                       
   
  } catch (err) {
    console.log("error performing mongodb findOne: ", err.message);
  }
};